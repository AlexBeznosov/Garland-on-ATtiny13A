
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000801  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004af  00000000  00000000  00000af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c0  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ea  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bc  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000019b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1c c0       	rjmp	.+56     	; 0x40 <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	56 c0       	rjmp	.+172    	; 0xc2 <mode_work+0x10>
  16:	5c c0       	rjmp	.+184    	; 0xd0 <mode_work+0x1e>
  18:	62 c0       	rjmp	.+196    	; 0xde <mode_work+0x2c>
  1a:	68 c0       	rjmp	.+208    	; 0xec <mode_work+0x3a>
  1c:	71 c0       	rjmp	.+226    	; 0x100 <mode_work+0x4e>
  1e:	7a c0       	rjmp	.+244    	; 0x114 <mode_work+0x62>
  20:	83 c0       	rjmp	.+262    	; 0x128 <mode_work+0x76>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e9       	ldi	r28, 0x9F	; 159
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a7 36       	cpi	r26, 0x67	; 103
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	b1 d0       	rcall	.+354    	; 0x19e <main>
  3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_3>:
uint8_t buf_lev_r
      , buf_lev_g
	  , buf_lev_b
	  ;

ISR ( TIM0_OVF_vect ) {  //обработка прерывания по переполнению таймера
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
  4c:	9f 93       	push	r25

	if ( ++counter == 0 ) { //счетчик перехода таймера через ноль
  4e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  52:	8f 5f       	subi	r24, 0xFF	; 255
  54:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  58:	81 11       	cpse	r24, r1
  5a:	0f c0       	rjmp	.+30     	; 0x7a <__vector_3+0x3a>
		buf_lev_r = lev_r; //значения длительности ШИМ
  5c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <lev_r>
  60:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <buf_lev_r>
		buf_lev_g = lev_g; //значения длительности ШИМ
  64:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <lev_g>
  68:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <buf_lev_g>
		buf_lev_b = lev_b; //значения длительности ШИМ
  6c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lev_b>
  70:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <buf_lev_b>
		PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2);
  74:	88 b3       	in	r24, 0x18	; 24
  76:	87 60       	ori	r24, 0x07	; 7
  78:	88 bb       	out	0x18, r24	; 24
	}
	
	if ( counter == buf_lev_r ) PORTB &= ~(1<<PB1); //подаем 0 на канал
  7a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  7e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <buf_lev_r>
  82:	98 13       	cpse	r25, r24
  84:	01 c0       	rjmp	.+2      	; 0x88 <__vector_3+0x48>
  86:	c1 98       	cbi	0x18, 1	; 24
	if ( counter == buf_lev_g ) PORTB &= ~(1<<PB2); //по достижении
  88:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  8c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <buf_lev_g>
  90:	98 13       	cpse	r25, r24
  92:	01 c0       	rjmp	.+2      	; 0x96 <__vector_3+0x56>
  94:	c2 98       	cbi	0x18, 2	; 24
	if ( counter == buf_lev_b ) PORTB &= ~(1<<PB0); //заданной длительности.
  96:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  9a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <buf_lev_b>
  9e:	98 13       	cpse	r25, r24
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <__stack+0x5>
  a2:	c0 98       	cbi	0x18, 0	; 24
	
}
  a4:	9f 91       	pop	r25
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <mode_work>:
		_delay_ms(10);
	}
}

void mode_work(int sel,int i) {
	switch ( sel ) {
  b2:	87 30       	cpi	r24, 0x07	; 7
  b4:	91 05       	cpc	r25, r1
  b6:	08 f0       	brcs	.+2      	; 0xba <mode_work+0x8>
  b8:	40 c0       	rjmp	.+128    	; 0x13a <mode_work+0x88>
  ba:	fc 01       	movw	r30, r24
  bc:	e6 5f       	subi	r30, 0xF6	; 246
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	09 94       	ijmp
		break;
	}
}

void rgb(int r, int g, int b) {
  lev_r = r; //Красный цвет
  c2:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <lev_r>
  lev_g = g; //Зеленый цвет
  c6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <lev_g>
  lev_b = b; //Синий цвет
  ca:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <lev_b>
  ce:	08 95       	ret
		break;
	}
}

void rgb(int r, int g, int b) {
  lev_r = r; //Красный цвет
  d0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <lev_r>
  lev_g = g; //Зеленый цвет
  d4:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <lev_g>
  lev_b = b; //Синий цвет
  d8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <lev_b>
  dc:	08 95       	ret
		break;
	}
}

void rgb(int r, int g, int b) {
  lev_r = r; //Красный цвет
  de:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <lev_r>
  lev_g = g; //Зеленый цвет
  e2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <lev_g>
  lev_b = b; //Синий цвет
  e6:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <lev_b>
  ea:	08 95       	ret
		break;
		case 2:
		rgb(0, 0, i);
		break;
		case 3:
		if ( i <= 85 ) {
  ec:	66 35       	cpi	r22, 0x56	; 86
  ee:	71 05       	cpc	r23, r1
  f0:	24 f5       	brge	.+72     	; 0x13a <mode_work+0x88>
		break;
	}
}

void rgb(int r, int g, int b) {
  lev_r = r; //Красный цвет
  f2:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <lev_r>
  lev_g = g; //Зеленый цвет
  f6:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <lev_g>
  lev_b = b; //Синий цвет
  fa:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <lev_b>
  fe:	08 95       	ret
		if ( i <= 85 ) {
			rgb(i, i, i);
		}
		break;
		case 4:
		if ( i <= 127 ) {
 100:	60 38       	cpi	r22, 0x80	; 128
 102:	71 05       	cpc	r23, r1
 104:	d4 f4       	brge	.+52     	; 0x13a <mode_work+0x88>
		break;
	}
}

void rgb(int r, int g, int b) {
  lev_r = r; //Красный цвет
 106:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <lev_r>
  lev_g = g; //Зеленый цвет
 10a:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <lev_g>
  lev_b = b; //Синий цвет
 10e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <lev_b>
 112:	08 95       	ret
		if ( i <= 127 ) {
			rgb(i, i, 0);
		}
		break;
		case 5:
		if ( i <= 127 ) {
 114:	60 38       	cpi	r22, 0x80	; 128
 116:	71 05       	cpc	r23, r1
 118:	84 f4       	brge	.+32     	; 0x13a <mode_work+0x88>
		break;
	}
}

void rgb(int r, int g, int b) {
  lev_r = r; //Красный цвет
 11a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <lev_r>
  lev_g = g; //Зеленый цвет
 11e:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <lev_g>
  lev_b = b; //Синий цвет
 122:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <lev_b>
 126:	08 95       	ret
		if ( i <= 127 ) {
			rgb(0, i, i);
		}
		break;
		case 6:
		if ( i <= 127 ) {
 128:	60 38       	cpi	r22, 0x80	; 128
 12a:	71 05       	cpc	r23, r1
 12c:	34 f4       	brge	.+12     	; 0x13a <mode_work+0x88>
		break;
	}
}

void rgb(int r, int g, int b) {
  lev_r = r; //Красный цвет
 12e:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <lev_r>
  lev_g = g; //Зеленый цвет
 132:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <lev_g>
  lev_b = b; //Синий цвет
 136:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <lev_b>
 13a:	08 95       	ret

0000013c <flight_f>:
			flight_b(mode);		
		}	
	}
}

void flight_f(int sel) {
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	8c 01       	movw	r16, r24
	for (int i = 0; i <= 255; i++) {
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
		mode_work(sel, i);
 14a:	be 01       	movw	r22, r28
 14c:	c8 01       	movw	r24, r16
 14e:	b1 df       	rcall	.-158    	; 0xb2 <mode_work>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	8f eb       	ldi	r24, 0xBF	; 191
 152:	9d e5       	ldi	r25, 0x5D	; 93
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <flight_f+0x18>
 158:	00 c0       	rjmp	.+0      	; 0x15a <flight_f+0x1e>
 15a:	00 00       	nop
		}	
	}
}

void flight_f(int sel) {
	for (int i = 0; i <= 255; i++) {
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	c1 15       	cp	r28, r1
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	d9 07       	cpc	r29, r25
 164:	91 f7       	brne	.-28     	; 0x14a <flight_f+0xe>
		mode_work(sel, i);
		_delay_ms(10);
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <flight_b>:

void flight_b(int sel) {
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	8c 01       	movw	r16, r24
	for (int i = 255; i >= 0; i--) {
 17a:	cf ef       	ldi	r28, 0xFF	; 255
 17c:	d0 e0       	ldi	r29, 0x00	; 0
		mode_work(sel, i);
 17e:	be 01       	movw	r22, r28
 180:	c8 01       	movw	r24, r16
 182:	97 df       	rcall	.-210    	; 0xb2 <mode_work>
 184:	8f eb       	ldi	r24, 0xBF	; 191
 186:	9d e5       	ldi	r25, 0x5D	; 93
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <flight_b+0x18>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <flight_b+0x1e>
 18e:	00 00       	nop
		_delay_ms(10);
	}
}

void flight_b(int sel) {
	for (int i = 255; i >= 0; i--) {
 190:	21 97       	sbiw	r28, 0x01	; 1
 192:	a8 f7       	brcc	.-22     	; 0x17e <flight_b+0xe>
		mode_work(sel, i);
		_delay_ms(10);
	}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <main>:
	if ( counter == buf_lev_b ) PORTB &= ~(1<<PB0); //заданной длительности.
	
}

int main(void) {
	DDRB  |= (1<<PB0)|(1<<PB1)|(1<<PB2);     // установка PortB пины 0,1,2 выходы
 19e:	87 b3       	in	r24, 0x17	; 23
 1a0:	87 60       	ori	r24, 0x07	; 7
 1a2:	87 bb       	out	0x17, r24	; 23
	// таймер работает без предделителя
	TCCR0B = _BV(CS00);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	83 bf       	out	0x33, r24	; 51
	// прерывания по переполнению таймера разрешены
	TIMSK0 = _BV(TOIE0);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	89 bf       	out	0x39, r24	; 57
	// глобально прерывания так же разрешены
	sei();
 1ac:	78 94       	sei
	
	while (1) {
		for (int mode = 0; mode<= 6; mode++ ) {			
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
			flight_f(mode);		
 1b2:	ce 01       	movw	r24, r28
 1b4:	c3 df       	rcall	.-122    	; 0x13c <flight_f>
			flight_b(mode);		
 1b6:	ce 01       	movw	r24, r28
 1b8:	db df       	rcall	.-74     	; 0x170 <flight_b>
	TIMSK0 = _BV(TOIE0);
	// глобально прерывания так же разрешены
	sei();
	
	while (1) {
		for (int mode = 0; mode<= 6; mode++ ) {			
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	c7 30       	cpi	r28, 0x07	; 7
 1be:	d1 05       	cpc	r29, r1
 1c0:	c1 f7       	brne	.-16     	; 0x1b2 <main+0x14>
 1c2:	f5 cf       	rjmp	.-22     	; 0x1ae <main+0x10>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
